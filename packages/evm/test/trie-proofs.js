const { assertRevert } = require('@aragon/test-helpers/assertThrow')
const { hexToAscii } = require('web3-utils')

const VerifyTester = artifacts.require('VerifyTester')

contract('Verify Tester', (accounts) => {
  let verifyTester

  beforeEach(async () => {
    verifyTester = await VerifyTester.new()
  })

  context('verify tester', () => {
    it('verifies proof', (done) => {
      let call = verifyTester.testVerify.request().params[0]

      call.from = '0xcb409caa43e385288d6bff2c3a0635688c7b3294'

      web3.eth.call(call, (err, data) => {
        // it is an error
        if (data.startsWith('0x08c379a0')) {
          const decodedError = hexToAscii(data)//.slice(74)
          console.log('Revert:', decodedError)
        } else {
          console.log(data)
        }

        verifyTester.testVerify().then(({ receipt }) => {
          console.log('gas', receipt.gasUsed)
          done()
        })
      })
    })

    it('verifies account proof', (done) => {
      const proof = "0xf90d33f90211a0c1dc634c4a9dde34e21ebeb8fa14cac2d9201f0f9222e4363935aa878b707648a0648e4d38fc91d3cf8aaed4e826be7053ec1da0d34dd933b89212f5b5bdb89fe6a0143a84c14e9c7b1f8ad8243854442ef576806bb6ade76c57c832e15fd3a0ec1aa08d1b372105d6da84eb63f36ad7c87a1080997d5b777459cc15189eff7c5aa1d3a004e91e1d9307d51ab6a70f3bd0c9c703cc336afd1bcea00ba2b18e5524188616a07dbb8b40b438f2d1cafcd90a97dbe9cab7483b7105d67b1ab38aa7ef31dae33ca007adaa78833051e716d63711138717925028cfb0c6aa391e3442da8907827a84a0415cb087abf69c5b0167097e2f7d2a6f29f122eddbb231fead16307038a4f362a0664e07310fddd6e21e0168862ab9d01097dc4507a99b9a6a08ac61169ac607dea0e532327c7321e771f10e6d0822a63dc8d12b5882ccd3adb4a7fcfed8e0c9d6cfa098573aedb470e774dfd636f34968b89eba7269a1231dd2866da24d0cf16b9ef3a036af4a797570fc3bf2c8caba0cdef15c8890acb423a10db2a1a73614df37c918a0daebead994240f91e81c878d88f23303a0d77e185166819e1c53c20ce6c5c60ca0623d514a72433dbc5d812a5e067ca73892e154db6f4362b014e9deeb2339d858a008f85077d092ced607d73233c62819373f63c789e0940177f8d74dcd84ec7015a0c057aaa7289e91554ceb72c6f28bc84619af2347a83f1177c1f13b3db4ab063780f90211a094705326c0ff4206d41f3d3d378c1654ed24c711cc70c0f3e1fbb2cb5a4cda11a02f3dc34474e3733162170c850966c10a45c4bed4a42fa5d49a628d6d7a38e520a07c02a0849654861b9f9a8e07382e6c7fb5daa49b62b4b6250f50a718319461e6a0c1a5895bb6ec8a31acbd45fa1c098b5f26ce4b156047ae78d34e9386941aebb3a0e2ea220f03ab226272115b0845cb7a329aa0f81452a7a7a5a4b5bd0a68e10322a045772e6bbfc235912990a63d3b43e6a0e0b0e00db2a2daf337d1f7a71ac50974a02723f7c6a4cd44e7538035bb9e63b1fe7cbc26eb04b63d70d1bb643aaf19ab3ba08193521072f9c57a74d234de3ab9c375d58decc5a3b59bc6597f17c819a4091ba00e85ee5dbec7d82ec22dee9799ffd26d5bfebeec9bb88eb3bb9263734f7147e4a0e206633a6217334e399a5c490de46fa21609a2d394991964a56c82cbf6904dc1a06623ed48b96bdbabe9b6b4681897a059872969a11c4ece61a9655acf026305c9a082db8449410fc2ba10ca7cae67262e63ee0bc2ff2175d1a57460aa8711de8327a042f6016bc73d2041728999ce6ad88937fa37063a3893fdcbd339c97c1a9d487ba0c2e588857017537e01da7ba69d1ee88ade72c405592a96842a9536035a047639a05e155d61ac963d86cea799df3660bf452eb386a98dab646f4cdb7669f0a1bee2a032b2ca22143388dc6659e96b94fabaca7fb5211c5d158fd09735c76816edf8f580f90211a001dd7187d477eaa95928872e310e59ffa3c1611a48c9e5e67bb810d9f9e239c9a0374e2cc27f33b2855d87bfd9a66975907c4e6ceb14818e73bf5cf86d1e7e58cda0a37c1e708a3bb5d85da5f48bba5f5418c60b8b44d9306d010dc0beb738175b3aa0f1aa0d3c7677c0973c914194225e422c50b3cdf94d6759e43e513015ee7c74b8a0e0e65056436d043b5ab32ea635917d6b7309182953e10769abb54d06074864dea0d44c1c693b62cf3e6003f492c200d1da9835e0872d7dd115c3802f95bf395cf3a05ece93d22e627004fc46f5d11c369e85c20d97043e9fac98bffd2dbba4b0cc3da05f639173ff4358881bcb8f79ed97e9b0c082bc1fab4be6378df4f6e1a20bfa87a0b37b8ec54eddd3d322315e050a8cb15a359b34397ff4cccc5a6cccea72073011a0efd2dcc1e88b2b013a41711acfd43922680e0ade4a91ea13115a7a0e1d6bb38ea0903111f6b1e9ad0b3018db290b91c5df1877218dbc18bb6443b35afc92a04252a0e4099d20492061d73184f82bbb14c1d755a4a41c05ea5d0d5faa8fea9bdcf9b1a056bbe8ee1ae0311d136696f00af9e1bb4e53143197b8d6df9390c7902a5affe0a0bf7e5081fd584e071e2a73647f4cb952b2632ee52c908094f53e66197738147da0836e4e301eff07e34ab677b8067f4ef45a55601582c5f94d4c9e8e2dd6a10ea3a02833c4c03fccf4f5a42231e874d7704bd2c8da76d5b0b69066e46c8a8aee750c80f90211a0c6c125e422bc74b145a8279d1cdf89d4242675972f2233dedcb137cf206527fda0ed7c4864c42740cfe08cfadee8a065fe334ba0121c1c487040a1aaa1c6bec475a0b8e7195613121264b8574aab4a8cbd62d3d214976c139fa77a32a3947afad61fa0c0cc1b70b3abb3c2e5213c0731a2844a7a5782f2733db11309552cb8f9ddb51ba06414a5034ed3294ad4d6255dd8afa3da2d648b80440a9b88fa1795a495f55b06a0f330ac708d1c124d13e8dc5b9cf0ce1fe214faf36d17acc376921f8810f83b86a072dc542f6871b7e451a9627d75e779c5fa33069bd55a214c1be2ac8d687d4574a05826566dde6aeebd178393b348e81db01098cb9a0bd4e4cff5ad64968b4454c7a0481455e4763f599556b214f0e5913a529d56ee4519f1b284a40ba0b1ca8aeda5a09818b57afede1c13ec10bf87d93ff60985b0a2d01f43aa2adb13b77f1636e40ca080b12866131ad4fbaad5871eb0244a23f1c603b55ac9913bb4ba11740fb1ea86a01b6e6e53f6c79d5bd6e59c5564d97b5571e9a73c0525be81fbb8be731164baf7a036e0ca42bffa81b2a175e80b00882f330f551dae929b745920be62d52e71cd54a0294f53b78aa5a8df1f22c5a2957336b8d78567c5edcc627d0aa6324ba0d842f3a00b4984ef49f67acb663ec00fe86d3aaec54848dad90e3d149dd314a857fc0e56a09f92624ba5f60ded60fe2007ca7efc39738592be2b659a896937a57ff65bb7c280f90211a0e046cf61fb91e1565530903d9739dec776d1175903ceef3f0fc759f30a2e9862a00fa5ad7e1f6aa504976d1b52538774e37114ac9b159868184c95402b7f4f8b3ea01eb48e4f7247cf2bd7d74b8bf09b2f453700ff383388929a78901d63428196a3a0bced6ae7d896829c45f93d52ef0f1976694a629a5042b273a2aa6c74070f45bea0a72de39b76dff984d6cee7c3dc1f44e514c0e1e798d54bebd96996080d757c27a02a633b771944631a21b8ee49a136fb0b007a9a22db297ce2d24fbca22c330834a0ad530d7ac0199d99f861fbc4b88216c5f753f6023913d5c7fd49f574b6504a70a0a96147e522e3e60735723e073fb21506440b657f5c25d75537151ebf8e465a1ba0541a3349616ba477facb64104baf97a650fcecbb6320f7b460d3f031fe1a2ef5a0b40d65cc0185b5c639db1969c1d436fd6e4de70b67fef7c927f9cf68e3f8f22aa0409294181721a27a2e9215fd8db7a5b63e04301228c6abaca08d6546b8fc3294a0310a0c26d30a28a931c4bf62970e285a09fd9af55acefad61acfbedce2ba5bcba01cc9c53eaafcfca11fab1dfbdeb5ebbfd617b801b897be2c98edb9b13eea9a5fa0e0cee72f9c9aa2eabc449e73a67ebcf32cda418609ea609aaa8bdda7721e8066a0d160a85e6bb93df659f3d0055ec26010db04c8ef9b84dbbdee95873d1e6f4c4ea0ed21847010bd01abb9eb24f7a0db0095c2a43dee4f5d983962dad6779db7eefe80f90211a062385df82387109e14e23b39ef9e2eb2d4cdfe140d1d86fa1949118b78ab9bb2a03594865744a68b597c83232f9a34ae7f40b34a9ae9f2b27aa33c73bac5155deaa0813c71c8961c2afe2837f18ddaa8bfda8c707ca877216c92ad256ccd1387658ea035f09b333a12f97e440222d5bb35c153174255beaf30a3935b125731977b696ea054ce31724d5cd9061188127ce3c9c311babe7afdbd1fa3844b8b3e44f2dc22d4a084d66e412d9ccbbfc7f72562b00cf95bbdd2e2fb8bf15c3ed016a28f12278980a0a76478feade9bcd97821757237d14b0f303c4a10c0c7a8efaf592c4ed0618d2ea0104826f80a80e47fedaea2d26c377def0325b27be7498e9de8c1010c024cd0eea06dba2e0813087645190139a66bec593e4c5c4e52306539182ab919d61aa50b59a08b561f39d9244dc29fdf613453536df376122f939f69c432d1fdfce98d827edaa00b91cf9f119d9fe35fe239d72418cdea253f34f4ed8732ed8cb29521e2c2cd1ca0bc0c149aef8cff7e1f8790ae220759d4dc7cbe6d8520202c8776e7ec219c63dfa0c905e11e7208d8393b2eb2cf06546fc7c0407d82968bdfd0071245b53afb9c87a03dd817933322bc5cd81b2a1876ac2bb8589b0a55ec43b41ea037b7d75e072a52a09ef79755fa1c7ab7db0150194bed454e0e7e7355d51ad022ccad67229d9b9e47a076f3b6d59aefd5f93b84579af435d53d4d9f21fee9e095284c670bef752bbd5c80f851808080a07a387803569e71bd1f2baaaa634727f64b400e3f8c238bf9123ba9fbc211417e8080808080808080808080a02e178e7cf85293cedef24e23dcc8f7f6c99aab89056319213c5c1f903b9785c680f8669d315f2da965a5697c88ffa264269d66d1cf398aaa205fdec66b120f9fd6b846f8440180a0956362c70d812cfabff139e6208ce71191e5588f34e234505f7e9136fcf50a46a057e3c35417a5331b61516864323f8dfbdf6dc15466512c26c71c839e4638323a"
      const root = "0x199d437a132bce68d66a94bcca129196ea5183a5d40712f1e959a8477cb9dbab"
      const ant = "0x960b236A07cf122663c4303350609A66A7B288C0"

      let call = verifyTester.verifyAccountProof.request(proof, root, ant).params[0]
      call.from = '0xcb409caa43e385288d6bff2c3a0635688c7b3294'

      web3.eth.call(call, (err, data) => {
        // it is an error
        if (data.startsWith('0x08c379a0')) {
          const decodedError = hexToAscii(data)//.slice(74)
          console.log('Revert:', decodedError)
          assert.fail()
        } else {
          console.log(data)
        }

        verifyTester.verifyAccountProof(proof, root, ant).then(({ receipt }) => {
          console.log('gas', receipt.gasUsed)
          done()
        })
      })
    })

    /*
    it('verifies exclusion proof', (done) => {
      let call = verifyTester.testExclusion.request().params[0]

      call.from = '0xcb409caa43e385288d6bff2c3a0635688c7b3294'

      web3.eth.call(call, (err, data) => {
        // it is an error
        if (data.startsWith('0x08c379a0')) {
          const decodedError = hexToAscii(data)//.slice(74)
          console.log('Revert:', decodedError)
        } else {
          console.log(data)
        }

        verifyTester.testExclusion().then(() => {
          assert.fail()
        })
      })
    })
    */
  })
})
