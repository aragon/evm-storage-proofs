pragma solidity ^0.4.24;

import "../lib/TrieProofs.sol";
import "../lib/RLP.sol";


contract VerifyTester {
    event Log(string a, uint256 lol);
    event Wants(bytes32 x, bytes32 y);

    function testVerify() public returns (uint) {
        bytes memory proof = hex"f909b7f90211a034fbd9b5d2513ba8a54ba4f2748c1bc37c419fc5aa8ff10738f84b36ad19a1b1a0dc0f818350446efb84fd638af6a1cb4dccac06c8afb36c61428df9b5f73ba655a0cfce1e858c969cfce41dee98985b61258a3544ed892700e765350934e07e047ba055d22626fc2a1cd88612b6308a4e1d9b48e85a30c62368089746a7dab3290299a076dd82561eef3993b577efbb39f5d8820d05ecc54f3b31eef189a9b99d7f524fa0db3ac37a5f0a09b180054f27d2cd9aa4c93659dc8a7c255dc88f36bbfa26fce7a0b6891e76c04048a8f5b087eab926315eb96d7c3cec45a3f537796cdeca02aa19a01e7f34687ba15bbbbca18bb8d41ec106f74cf302b216d34efd46ad8931bec8c2a0774010c7afc885454ba9c7fd82aeead642b4b012697e7c13727bc2250155ac3ca0deff2d22d1f3c3eacc58f53c86243cb1c6a05885318675929cc2f750abbf83e9a08202bbd6c52a7a257b3d3423e6adc941628d0c7a9269b6328aecb14380770851a0cee9c8f41715cab95d94157d301697c1b8755bab6fd4d943837435cb05b41401a0b1acbc9edcab63e94656a874bbbec22459c4b9e483bf8018489b59afb78e481ba02e327b55d6c0c3cc1729e275f4e33a040582245bedae32cda5f4546e8b125bfda0f3f4fb4825589b3b6a3e38291aab01e9a51b8c7dcecfb65652688811df60a5dfa0d841a6eaaf76ae382076a9335f0ec7a48cf607d21f9753c0f896f3bdc3a0efd780f90211a0b9b5b02e20fee235775c0896e7c70f9f23b235346103a7870f466f23ae612418a0e0590c9f59ba427cb25081768a7541606c26ee293a61ce9bfbe9439733e4ec24a07a436d3b77272bc9b2d38e2d495045cf2d2d86d1945ad4f93204f50be8fb4806a0bc0dfd944b55431ba71245b3b0561b1a14eb74c5a64f8bd18198aba558031819a0f8522e9db1d90aee339c5ab3148a765922effd5550db925bc18e4b16c5be9a7ea0f8891c34c13c0a40e3cea6d9ca17dbdb767c0d482da9a72aacc98ed97c3d6118a0e5f668b648a1e7fca13d426c30fcded5921c52f124ef7ddec811fa8291166c5fa0f05495eb96f359d949cdad1cef975c88aef78b9dbb21f8392276e461508ae1b2a0492b8f5bf1dd40c50a6c51635c5adecb37b8b43500117d518f93afe129060a08a062d6a0ece17bc82c308fb33c6b3cbf55e06a31e551f4a051cf6ca9015abebdc5a0889d3531dc65374facda2569bdd0941ea6b6d553b794171792600800575dd71ea0ba0656875c91226f72e6954e6dca49f379a236306a0a24a7df6529fca08b0545a054de7c733639af364974d668618e11e941c52f642476aabd557a231908cadbeda0b47531aef9a7f07051f92ea0cfe23e4c903bc92b2dca592277ba126263d63ca2a051554e5c742155eb47e346d1d2e16a791495ea9d72ed06438ed5ed0c9593c7e8a00686eea8bf7ea5ed95ea214fa0e351525fbc73fd26f1c8b04d7676adaffb33ee80f90211a0ed5df8707c9d001010fbc9aebf0d729736bfe5cec6d16ab9c222f9f5eb0bf57da007ce9816ed2b0133b1ccb4a100389492deba1870b03484a28e13b7e01e4b165aa01a4f3dee323510f583c4875e68b369fe53d8af7062fe4c327458cbde790ffe75a0fa6a37832f70e9af9fa5fefc4ee24a8a1eecb106680113f05d9c5b27562cf58ca01fad0739ef0744a58f055b152ab6b8f635a9f9b7daa701fe68c1185ef4856eeaa09874bd67db6e611dc9f13d0df214ebdd015ebd478d6ea72e9a83114da241f5d7a018ee001f70abfe843667bc727701b99b5531c4b9048b439be03f9ec2f663cce7a0d05f91e819e6d4eee8941e63006df381c7cfced531182eecf7aa438b351668eaa0d69f123017e148a39388c942a2c9c45661f31205ec2ced3c7151cc1718bda870a094872bd985be74d69483d4f2afe5f9fcbd434e7e8b83f488af14f19e03f41735a06304dc60cf0c28de80442dd8fc555847f3e53a2f3f7a62bc726136665aa49b5ca0ba18a70d09a32b9fd419f65f8ab82a50f8396995b470000bc3d9676a7725a83fa087439e4227f8a81a221ee405be7f2518fb1ba7946691ab07404f76168e1a4e57a06d1f4f8cba860cb1daf66a6afc3c63320bed8eea37c70d03cc1d4ad30e0dd5fda0d06468dc679888bbdb23a08123df58f592e16eed5fcf5ed9ea210602b711d7d2a04a7f3ae24e7ac5da027c3f2ed5553022b42e124201f95384df178cb52517d50380f90211a0687c6a35543963007ff8d1913beb92820b745c4eb1df761aa9d18f3f5c60bf63a0149bdf9864930de499096d6ceb0576e46d53f55ba838a288680c65957eb197bda039a434722cae0d0a855d365d8333de0b5c9ed18347b7e774431e680e313b4657a0bd33940175e26f5bb19d2dcf647d71fe97829d23c4ed5586ea2664da0e97fb15a0341902f60aee834f6340b8d2cc61ed84991c96f895259fd3ccdcc4b8f563d754a0fff77c97ebe6e09f14eb7f57ebf258b9fd88350deb809a4bd0184be9beace50aa07d3061a61c8518aa64830cd6b3a56e0620627bd8a3e7aa3130e0e0f84a7e62a3a0b47c15cfc6bdef58ca4904d336cfd417019abfbbc5d7180a5f35e7c31ef5cebca07ae7b8bb307577461796a8954d37ee96caceaab413e3c16b65791baa1026e2a9a074f71530a3eb9224765ca4afc739a1ee53f5fab0a38bab09f531d044220023e9a0a10684b1ab403d9807f0e49ddf8e41e27783d4600f16e190f34b1f7ace07ab09a0fd2bfafb92af66758132ea497297f94ee19a406ac897e27e1f3d2b7feab89464a023554260283697acaca3449f26d8187898765a8def6fbf1dcf7adda465812db0a03cc13ac140a3b2d7e6967223a169362b6ba4129dd4a9c7fa9850e827d9600698a095b8e2f15ec482269dec28440c80bb55540102f18142ef8cdb500bb17f936215a0ccd227a17b22ce64646219e1dec7a451879a94111723c384b08efe66189cef0f80f8f1a0d707e601b157cbc46f96183f4e474082f980acd49d81dd98439fe78874babb3180808080a0a40e92179a0c667c68e1d84440a3ab262a7dafe5a9934d269bc317579a134933a0f1820f91a031618fe815fb02783a278c2b65c32736b5010071d3f1a78fd1701480a05651429a66036bcedd56685880b2fb4b32f5bf9c38dd57bb37082111394010d1a09e5eea39f16e01912eb0d65906c18717b4a46e92526a517ef1e3877e59c2040780a0e3b1f4370a44ffd4661a7132ba91cc876a94c788fdec2e7388faa7083a347ab780a0215a4948d38265df8ee0ca39804e56a48e020fe88d85e4528dc05b074f730637808080f8518080a017c36d2e7a0756f8a973370fd7ccaa65b41e21fbc01a1e112fea3e0b2a1a589580808080a0eb43d68008d216e753fef198cf51077f5a89f406d9c244119d1643f0f2b19011808080808080808080e09e20fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace12";
        bytes32 hash = 0x956362c70d812cfabff139e6208ce71191e5588f34e234505f7e9136fcf50a46;
        bytes32 path = 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace;

        bytes memory data = TrieProofs.verify(proof, hash, path);
        return RLP.toUint(RLP.toRLPItem(data));
    }

    function testExclusion() public returns (bytes memory) {
        bytes memory proof = hex"f90923f90211a034fbd9b5d2513ba8a54ba4f2748c1bc37c419fc5aa8ff10738f84b36ad19a1b1a0dc0f818350446efb84fd638af6a1cb4dccac06c8afb36c61428df9b5f73ba655a0cfce1e858c969cfce41dee98985b61258a3544ed892700e765350934e07e047ba055d22626fc2a1cd88612b6308a4e1d9b48e85a30c62368089746a7dab3290299a076dd82561eef3993b577efbb39f5d8820d05ecc54f3b31eef189a9b99d7f524fa0db3ac37a5f0a09b180054f27d2cd9aa4c93659dc8a7c255dc88f36bbfa26fce7a0b6891e76c04048a8f5b087eab926315eb96d7c3cec45a3f537796cdeca02aa19a01e7f34687ba15bbbbca18bb8d41ec106f74cf302b216d34efd46ad8931bec8c2a0774010c7afc885454ba9c7fd82aeead642b4b012697e7c13727bc2250155ac3ca0deff2d22d1f3c3eacc58f53c86243cb1c6a05885318675929cc2f750abbf83e9a08202bbd6c52a7a257b3d3423e6adc941628d0c7a9269b6328aecb14380770851a0cee9c8f41715cab95d94157d301697c1b8755bab6fd4d943837435cb05b41401a0b1acbc9edcab63e94656a874bbbec22459c4b9e483bf8018489b59afb78e481ba02e327b55d6c0c3cc1729e275f4e33a040582245bedae32cda5f4546e8b125bfda0f3f4fb4825589b3b6a3e38291aab01e9a51b8c7dcecfb65652688811df60a5dfa0d841a6eaaf76ae382076a9335f0ec7a48cf607d21f9753c0f896f3bdc3a0efd780f90211a0990e582dd1ab208bbaa98a2f14922526fa72969ed2c93ff60ba746ab4b7cb30ba012e3241e1717f2e768e680716ae724fb577167b30072a52d5c73c16adf386735a0106eb128f800e0a2b81f49790aa1163b4ea31f865d97ac85211bd99273b3ee15a06d5d23d8a92ced012c6d8d8682cf4e334e65953cfaff3d7e1bb1ab38ce8d4062a0f1f17449b99aff5fa3fdb2d1863a27a0874b2c624877d6df853db7561686b2e0a01843ad640da1a45956adfaa55caca910d8a6710be702ebea24a988d1ac4116faa067d6d19de84beb3a1da88d6717c5a65f4dd4813a25221a6fe8a86be096f6245ca0a6b97daa2f604c4003f01c0266af980231e97b63cb46c52b5892401785291538a02e11d838a35a827aabd9057648a3e8c53870e25849129c5d44ee727b66ead81ea07cd7b95c06e318eb2b46765c65cc9dff8a6f8524b683d7540cd1aef51a574b89a04e794e07be3ff38e4f7d1a12ecbb25cc27d777f2a377f6f337f6bc319cfc0705a04b8246468c41fd23f817ebb950c7b3f4c6e767632b5276c4f41b8bc686df47aca0a2d0b77b142bb17708489c9716668400f86d176faf49810d1746f9fb0fdf0c89a0f0165f1136dc2e9be96d97275cd0cc90474db91d8461c3cddf58429e02ca0b0ea0c5af50b4c4c2062ecffee3c9e5ad4d5609df1a5ae922b334e5e31f6ac7019347a0c2c855ffcc0008a82be3948bb1b2b8a2e4588638f0ecbbb52d083ebef864a3d580f90211a0a2d07bac2c266b301c35f5582b1973fe6da80d22c6a1d1ca77132dee1522cc21a0b7da8101e31883ac20840c4e14e902a088b20772392cd6a36be7925faec347b6a07aa3af81bd377784ccbce5c8b456df84ffb4120f1e180f3c50083ae98f7b3062a0bc34747d692738f0d0a7a9ea48729510e3ff3b7518ea7f0e75c38203bb2fbea4a00f1e61a1bde835996b41c47851716823bf60d24f180bc5eb59de4bdcc47d8a93a08023aa1473adb6916d7fc2cdb7bd283cef7a1072aa096f69d28c9719bbb9b106a00ae35c2fd626bd64fb9a215917484c170b9badd350c04ad993b74a2253d5e74fa0345fadd321c180309f11b02ff8c448d350a67aa86255a388af4e90b45fd927d3a09e3b83a0adcb5d60e50d4b1dfc1729a240c7e10ad51203d7fca031609b699ebca096f54b2e4d623f44b3f4d7c58405970d06f2e9833a147eb94d95edbff821e654a0fe76f6f8dc38ca9e6c3aa62c1d6dbc9cd327dc6a378ecc105cf3a72d24cfe192a070594abc48ad4a6f6a2038a96c1da1c03ef48956066b90f221c4de171b751269a065e30ca12152e33cf6e19975d1c0f0df526b05f26d8508650db4120c39290d7da0fb80672e2c6978acfa5532f827ed4b6cd0293ba85cb0a21d2568e0e654618d41a0ea63612b9a1d56e267f6083807f77663e1320c475da2fe22854a0e4d8ba5462da029139a5884a9d24bfc9437c8d1f13d7d74b2944635902c5d9a07e9eb144755eb80f90211a0281f857962efc94e8b0f39ed63e5d2db74f8a148f2996e040e9d9278a8dae6eca028736760f6db4c6d81ad7b5f4a19c2cda0e129a3dd79174e723f4558c8cbdb73a0dca7d0af72b9807e5a26088f95a8936fbb008e0924ee0b7c3cdf4b95df64cc8fa0c42d7d27492dbbdd3d339be9dee064bbd8e46f7fc34f7e6684099ddffce0e283a0589e23c58924d4036a6307916c72b91e1d4d530f0e0752a507dc8130b7d3e485a04c0b9d9e78a746c2dc0f338d64440d0dea93af74ad86a8716750b97116fa7b4aa0d51f3a2c3203b58dab6847d1043d3a1e9878e7c0f2108dbdeb59f6999d845e76a070ab3b63f9bbe22d877a6adbe4c7f3d886a9b1f53b43b661c471eba29bc344aca0457dc339f2e6487110d3baddce06fd971b5213bf96f8ce3f6e3e97731df5229ca00c6b35e0259e95ba9194fdd4981a47b2e60be959e68bce7ea6a0380d6e3e310fa004970af50aa74de9a3e15ece26797d32a8cec613073f3405b26303c966a5b5d6a06109a27d62f0e2196ccc650a1ac25a2adbb2754b8335631845d1df9a53b8b9c2a06224d2b69bc9200198b1256479dc9af028f98d078eeb7d45f001cb469c622f3fa0f3f1d8cb847cd30fc9c5bf23a93a1cd432a7e5cce0540a5a6804cb2a0a59eb17a0f6ac80437063bc64d41f95741e5e0bb2ca6735c5aaac76704b22e9ef1962e569a03ff83ca920e8c68714d06b5450df08e6eeee555a13bc20a10a75592935d6e64a80f8d180a0965e5595f6abd66d7c3175a5aff4c2e04672f0229af197d3d818f7f77c54b7d380a058402eab0bec2fb5937ad7b0d3d3c220d6c102548d99c0d0ff06805817692310a0c8768c31bed6cf3258216ed5c71f146a63a8cece11227dc240af847217747e27a0a335a26b5a415912685a94bedbec4f986b8c44661aae018375a556551dc91fd5808080a042d9be3b79c8a6ebf3c4a2ec08b80f9a021b1613b5fb36ae0c1e14d631dd7a60808080a0d00e259041ddc1aa0e1d514cdfb2f5f2dc93a6eda853ac5379c19626094b3df7808080";
        bytes32 hash = 0x956362c70d812cfabff139e6208ce71191e5588f34e234505f7e9136fcf50a46;
        bytes32 path = 0xce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec;

        return TrieProofs.verify(proof, hash, path);
    }

    function verifyAccountProof(bytes memory proof, bytes32 hash, address account) public returns (bytes memory) {
        return TrieProofs.verify(proof, hash, keccak256(abi.encodePacked(account)));
    }
}